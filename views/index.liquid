{% render 'partials/head.liquid' %}
{% render 'partials/header.liquid' %}

<h1 class="hero-title">De mensen van Q42</h1>

<p class="hero-text">Onze mensen noemen we Q'ers. Maar wie zijn dat dan? Die Q'ers die het internet aan het afmaken zijn? Check ze allemaal hieronder. En wil je ook Q'er worden, scroll dan even voorbij onze hoofden voor de openstaande vacatures!</p>

<ul class="main-list">
    {% for mens in mensen %}
    <li>
        <div class="person-container">
            <picture>
                <source type="image/avif" srcset="{{ mens.avatars | first }}">
                <source type="image/webp" srcset="{{ mens.avatars | first }}">
                <img class="person-foto" src="{{ mens.avatars | first }}" alt="foto van {{ mens.name }}" width="288" height="288">
            </picture>
            <p class="person-name">{{ mens.name }}</p>
            <p class="person-email">{{ mens.email }}</p>
            <p class="person-tags"> {{ mens.tags | first }}</p>
            <form method="POST" action="/like/{{ mens.id }}" data-enhanced="form-{{ mens.id }}">
            <button class="like-btn" type="submit" value="like">ðŸ’š
                <p class="person-likes"> {{ mens.likes }}</p>
            </button>
            </form>
        </div>
    </li>
    {% endfor %}
</ul>

<script type="module">

  document.addEventListener('submit', async function(event) {


    // Hou in een variabele bij welk formulier dat was
    const form = event.target
    // Als dit formulier geen data-enhanced attribuut heeft, doe dan niks speciaals (laat het formulier normaal versturen)
    // Dit doen we, zodat we sommige formulieren op de pagina kunnen 'enhancen'
    // Door ze bijvoorbeeld data-enhanced="true" of data-enhanced="formulier-3" te geven.
    // Data attributen mag je zelf verzinnen: https://developer.mozilla.org/en-US/docs/Learn_web_development/Howto/Solve_HTML_problems/Use_data_attributes
    if (!form.hasAttribute('data-enhanced')) {
      return
    }

    const likeBtn = form.querySelector('.like-btn');

    // Voorkom de standaard submit van de browser
    // Let op: hiermee overschrijven we de default Loading state van de browser...
    event.preventDefault()

    likeBtn.classList.add('loading');

    // Verzamel alle formuliervelden van het formulier
    let formData = new FormData(form)

    // formData.append('enhanced', 'true')

    // En voeg eventueel de name en value van de submit button toe aan die data
    // https://developer.mozilla.org/en-US/docs/Web/API/SubmitEvent/submitter
    if (event.submitter) {
      formData.append(event.submitter.name, event.submitter.value)
    }

    // Doe een fetch naar de server, net als hoe de browser dit normaal zou doen
    // Gebruik daarvoor het action en method attribuut van het originele formulier
    // Inclusief alle formuliervelden
    const response = await fetch(form.action, {
      method: form.method,
      body: new URLSearchParams(formData)
    })
    

    // De server redirect op de normale manier, en geeft HTML terug
    // (De server weet niet eens dat deze fetch via client-side JavaScript gebeurde)
    const responseText = await response.text()

    // Normaal zou de browser die HTML parsen en weergeven, maar daar moeten we nu zelf iets mee
    // Parse de nieuwe HTML en maak hiervan een nieuw Document Object Model in het geheugen
    const parser = new DOMParser()
    const responseDOM = parser.parseFromString(responseText, 'text/html')

    // Zoek in die nieuwe HTML DOM onze nieuwe UI state op, die we via Liquid hebben klaargemaakt
    // We gebruiken hiervoor het eerdere data-enhanced attribuut, zodat we weten waar we naar moeten zoeken
    // In de nieuwe HTML zoeken we bijvoorbeeld naar data-enhanced="true" of data-enhanced="formulier-3"
    // (Hierdoor kunnen we ook meerdere formulieren op dezelfde pagina gebruiken)
    const enhancedKey = form.getAttribute('data-enhanced')
    const newState = responseDOM.querySelector(`form[data-enhanced="${enhancedKey}"]`)


    console.log(responseDOM.body.innerHTML)

    // Overschrijf ons formulier met de nieuwe HTML
    // Hier wil je waarschijnlijk de Loading state vervangen door een Success state
    form.outerHTML = newState.outerHTML

  })

</script>

{% render 'partials/footer.liquid' %}
